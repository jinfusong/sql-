
--1、门店sku维度
drop table if exists a ;
create temp table a as 
select
	t1.shop_code,
	t1.product_code,
	t3.is_main ,  --ABC等级 1是A,0是B,-1是C
	t1.sale_date,
	t2.sale_date  sale_date_t2,
	coalesce(t1.d1,0) predict_qty , --预测量
	coalesce(t1.d1,0)*coalesce(t3.price_sale,0) predict_amt ,--预测金额
	coalesce(t2.qty,0) supply_end_qty,-- 销补后数量
	coalesce(t2.qty,0)*coalesce(t3.price_sale,0) supply_end_amt --销补后金额
from 
	rst.rst_sale_predict_copy t1 left join rst.rst_sale_proportion_feat t2 --t2.qty销补数量
	on t1.shop_code = t2.shop_code
	and t1.product_code = t2.product_code
	and t1.sale_date = t2.sale_date 
	left join  rst.rst_product_onsale_history t3
	on  t1.shop_code = t3.shop_code
	and t1.product_code = t3.product_code
	and t1.sale_date = t3.sale_date
where 
	t1.sale_date >='2019-08-01' and t1.sale_date <='2019-08-31'
; -- select * from a ;
-- select count(*) from a where is_main is null; 

drop table if exists b  ;
create temp table b as 
select 
	b2.shop_name,
	b3.product_name,
	b3.product_type,
	b1.*,
--	row_number() over (partition by b1.shop_code,b1.product_code order by b1.sale_date asc ),
	abs(predict_qty - supply_end_qty)/ nullif(supply_end_qty,0)  ape 
from 
	a b1 left join edw.dim_shop b2
	on b1.shop_code =b2.shop_code
	left join  edw.dim_product b3
	on b1.product_code = b3.product_code
where 
	is_main is not null 
	and b3.product_type = '气调产品'

; -- select count(*)  from b 
-- select *  from   b ;
-- select *  from   b  where product_type <> '拌菜产品' and ape is not null 


--门店sku维度
drop table if exists c  ;
create temp table c as 
select 
	shop_code,
	shop_name,
	product_code,
	product_name,
	product_type,
	is_main,
	sum(coalesce(predict_qty,0)) predict_qty,
	sum(coalesce(predict_amt,0)) predict_amt,
	sum(coalesce(supply_end_qty,0)) supply_end_qty,
	sum(coalesce(supply_end_amt,0)) supply_end_amt,
	avg(ape)  avg_ape
from 
	b 
where 
	supply_end_qty<>0 and supply_end_qty is not null 
group by shop_code,shop_name,product_code,product_name,product_type,is_main
;-- select *  from c ;


--算权重
drop table if exists d  ;
create temp table d as 
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	c 
; -- select * from d


-- A类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	c 
where 
	is_main = 1
;

-- B类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	c 
where 
	is_main = 0
;

-- C类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	c 
where 
	is_main = -1
;






--------------------------------------连续三天的算法-----------------------------------------------

--1、门店sku维度
drop table if exists a ;
create temp table a as 
select
	t1.shop_code,
	t1.product_code,
	t3.is_main ,  --ABC等级 1是A,0是B,-1是C
	t1.sale_date,
	t2.sale_date  sale_date_t2,
	coalesce(t1.d1,0) predict_qty , --预测量
	coalesce(t1.d1,0)*coalesce(t3.price_sale,0) predict_amt ,--预测金额
	coalesce(t2.qty,0) supply_end_qty,-- 销补后数量
	coalesce(t2.qty,0)*coalesce(t3.price_sale,0) supply_end_amt --销补后金额
from 
	rst.rst_sale_predict_copy t1 left join rst.rst_sale_proportion_feat t2 --t2.qty销补数量
	on t1.shop_code = t2.shop_code
	and t1.product_code = t2.product_code
	and t1.sale_date = t2.sale_date 
	left join  rst.rst_product_onsale_history t3
	on  t1.shop_code = t3.shop_code
	and t1.product_code = t3.product_code
	and t1.sale_date = t3.sale_date
where 
	t1.sale_date >='2019-08-01' and t1.sale_date <='2019-08-30'
; -- select * from a ;
-- select count(*) from a where is_main is null; 

drop table if exists b  ;
create temp table b as 
select 
	b2.shop_name,
	b3.product_name,
	b3.product_type,
	b1.*,
	row_number() over (partition by b1.shop_code,b1.product_code order by b1.sale_date asc ) row_num,
	row_number() over (partition by b1.shop_code,b1.product_code order by b1.sale_date asc )-1 row_num_1,
	trunc((row_number() over (partition by b1.shop_code,b1.product_code order by b1.sale_date asc )-1)/3)::int row_group
from 
	a b1 left join edw.dim_shop b2
	on b1.shop_code =b2.shop_code
	left join  edw.dim_product b3
	on b1.product_code = b3.product_code
where 
	is_main is not null 
	and b3.product_type = '气调产品'
; -- select count(*)  from b 
-- select *  from   b ;
-- select *  from   b  where product_type <> '拌菜产品' and ape is not null 
-- shop_name = '中兴花园店'  and product_name = '吮指酱鸭(财治木纹浅)'

drop table if exists c  ;
create temp table c as 
select
	*,
	sum(coalesce(predict_qty,0)) over (partition by shop_code,product_code,row_group) predict_qty_sum ,
	sum(coalesce(supply_end_qty,0)) over (partition by shop_code,product_code,row_group) supply_end_qty_sum,
	abs(sum(coalesce(predict_qty,0)) over (partition by shop_code,product_code,row_group)   
	-sum(coalesce(supply_end_qty,0)) over (partition by shop_code,product_code,row_group)
	)/nullif(sum(coalesce(supply_end_qty,0)) over (partition by shop_code,product_code,row_group),0) ape
from 
	b
;-- select *  from c ;


--门店sku维度
drop table if exists d  ;
create temp table d as 
select 
	shop_code,
	shop_name,
	product_code,
	product_name,
	product_type,
	is_main,
	sum(coalesce(predict_qty,0)) predict_qty,
	sum(coalesce(predict_amt,0)) predict_amt,
	sum(coalesce(supply_end_qty,0)) supply_end_qty,
	sum(coalesce(supply_end_amt,0)) supply_end_amt,
	avg(ape)  avg_ape
from 
	c
where 
	supply_end_qty<>0 and supply_end_qty is not null 
group by shop_code,shop_name,product_code,product_name,product_type,is_main
;-- select *  from d ;


--算权重
drop table if exists e  ;
create temp table e as 
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	d 
; -- select * from e


-- A类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	d 
where 
	is_main = 1
;

-- B类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	d
where 
	is_main = 0
;

-- C类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	d
where 
	is_main = -1
;






------------------------先门店sku，abs(预测-销补) pe ，再avg_pe,avg_销补，得到误差率，再加权，四分位----------------------------------------------------------

--1、门店sku维度
drop table if exists a ;
create temp table a as 
select
	t1.shop_code,
	t1.product_code,
	t3.is_main ,  --ABC等级 1是A,0是B,-1是C
	t1.sale_date,
	t2.sale_date  sale_date_t2,
	coalesce(t1.d1,0) predict_qty , --预测量
	coalesce(t1.d1,0)*coalesce(t3.price_sale,0) predict_amt ,--预测金额
	coalesce(t2.qty,0) supply_end_qty,-- 销补后数量
	coalesce(t2.qty,0)*coalesce(t3.price_sale,0) supply_end_amt --销补后金额
from 
	rst.rst_sale_predict_copy t1 left join rst.rst_sale_proportion_feat t2 --t2.qty销补数量
	on t1.shop_code = t2.shop_code
	and t1.product_code = t2.product_code
	and t1.sale_date = t2.sale_date 
	left join  rst.rst_product_onsale_history t3
	on  t1.shop_code = t3.shop_code
	and t1.product_code = t3.product_code
	and t1.sale_date = t3.sale_date
where 
	t1.sale_date >='2019-08-01' and t1.sale_date <='2019-08-31'
; -- select * from a ;
-- select count(*) from a where is_main is null; 

drop table if exists b  ;
create temp table b as 
select 
	b2.shop_name,
	b3.product_name,
	b3.product_type,
	b1.*,
	abs(predict_qty - supply_end_qty)  pe 
from 
	a b1 left join edw.dim_shop b2
	on b1.shop_code =b2.shop_code
	left join  edw.dim_product b3
	on b1.product_code = b3.product_code
where 
	is_main is not null 
--	and b3.product_type = '气调产品'

; -- select count(*)  from b 
-- select *  from   b ;
-- select *  from   b  where product_type <> '拌菜产品' and ape is not null 


--门店sku维度
drop table if exists c  ;
create temp table c as 
select 
	shop_code,
	shop_name,
	product_code,
	product_name,
	product_type,
	is_main,
	sum(coalesce(predict_qty,0)) predict_qty,
	sum(coalesce(predict_amt,0)) predict_amt,
	sum(coalesce(supply_end_qty,0)) supply_end_qty,
	sum(coalesce(supply_end_amt,0)) supply_end_amt,
	avg(pe)  avg_pe,
	avg(supply_end_qty) avg_supply_end_qty,
	nullif(avg(pe)/avg(supply_end_qty),0)  ape 
from 
	b 
where 
	supply_end_qty<>0 and supply_end_qty is not null 
group by shop_code,shop_name,product_code,product_name,product_type,is_main
;-- select *  from c ;


--算权重
drop table if exists d  ;
create temp table d as 
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * ape  wape 
from 
	c 
; -- select * from d


-- A类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	c 
where 
	is_main = 1
;

-- B类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	c 
where 
	is_main = 0
;

-- C类品
select 
	*,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code))  supply_end_percent,
	supply_end_amt / (sum(supply_end_amt) over(partition by shop_code)) * avg_ape  mape 
from 
	c 
where 
	is_main = -1
;































